// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "comm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Finger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Finger_reflection_ = NULL;
const ::google::protobuf::Descriptor* NameSpace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameSpace_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManipulateNS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManipulateNS_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryDocument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryDocument_reflection_ = NULL;
const ::google::protobuf::Descriptor* NameValueSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameValueSet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NameValueSet_NodeType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Document_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Document_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Header_Routing_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Header_ReplyStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Payload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Payload_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayloadReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayloadReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Heartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Heartbeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Network_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Network_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Network_Action_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Management_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Management_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_comm_2eproto() {
  protobuf_AddDesc_comm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "comm.proto");
  GOOGLE_CHECK(file != NULL);
  Finger_descriptor_ = file->message_type(0);
  static const int Finger_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Finger, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Finger, tag_),
  };
  Finger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Finger_descriptor_,
      Finger::default_instance_,
      Finger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Finger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Finger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Finger));
  NameSpace_descriptor_ = file->message_type(1);
  static const int NameSpace_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpace, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpace, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpace, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpace, zip_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpace, password_),
  };
  NameSpace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameSpace_descriptor_,
      NameSpace::default_instance_,
      NameSpace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameSpace));
  LoginInfo_descriptor_ = file->message_type(2);
  static const int LoginInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, password_),
  };
  LoginInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginInfo_descriptor_,
      LoginInfo::default_instance_,
      LoginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginInfo));
  Point_descriptor_ = file->message_type(3);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  ManipulateNS_descriptor_ = file->message_type(4);
  static const int ManipulateNS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateNS, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateNS, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateNS, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateNS, zip_code_),
  };
  ManipulateNS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManipulateNS_descriptor_,
      ManipulateNS::default_instance_,
      ManipulateNS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateNS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateNS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManipulateNS));
  QueryDocument_descriptor_ = file->message_type(5);
  static const int QueryDocument_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDocument, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDocument, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDocument, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDocument, time_),
  };
  QueryDocument_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryDocument_descriptor_,
      QueryDocument::default_instance_,
      QueryDocument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDocument, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDocument, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryDocument));
  NameValueSet_descriptor_ = file->message_type(6);
  static const int NameValueSet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameValueSet, node_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameValueSet, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameValueSet, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameValueSet, node_),
  };
  NameValueSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameValueSet_descriptor_,
      NameValueSet::default_instance_,
      NameValueSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameValueSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameValueSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameValueSet));
  NameValueSet_NodeType_descriptor_ = NameValueSet_descriptor_->enum_type(0);
  Document_descriptor_ = file->message_type(7);
  static const int Document_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, name_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, img_byte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, file_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, time_),
  };
  Document_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Document_descriptor_,
      Document::default_instance_,
      Document_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Document));
  Header_descriptor_ = file->message_type(8);
  static const int Header_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, routing_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, originator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, reply_msg_),
  };
  Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header));
  Header_Routing_descriptor_ = Header_descriptor_->enum_type(0);
  Header_ReplyStatus_descriptor_ = Header_descriptor_->enum_type(1);
  Payload_descriptor_ = file->message_type(9);
  static const int Payload_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, finger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, doc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, queryuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, login_),
  };
  Payload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Payload_descriptor_,
      Payload::default_instance_,
      Payload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Payload));
  PayloadReply_descriptor_ = file->message_type(10);
  static const int PayloadReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadReply, docs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadReply, spaces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadReply, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadReply, finger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadReply, uuid_),
  };
  PayloadReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayloadReply_descriptor_,
      PayloadReply::default_instance_,
      PayloadReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayloadReply));
  Request_descriptor_ = file->message_type(11);
  static const int Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, body_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Response_descriptor_ = file->message_type(12);
  static const int Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, body_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  Heartbeat_descriptor_ = file->message_type(13);
  static const int Heartbeat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, nodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, timeref_),
  };
  Heartbeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Heartbeat_descriptor_,
      Heartbeat::default_instance_,
      Heartbeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Heartbeat));
  Network_descriptor_ = file->message_type(14);
  static const int Network_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, nodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, action_),
  };
  Network_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Network_descriptor_,
      Network::default_instance_,
      Network_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Network));
  Network_Action_descriptor_ = Network_descriptor_->enum_type(0);
  Management_descriptor_ = file->message_type(15);
  static const int Management_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Management, graph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Management, beat_),
  };
  Management_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Management_descriptor_,
      Management::default_instance_,
      Management_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Management, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Management, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Management));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_comm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Finger_descriptor_, &Finger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameSpace_descriptor_, &NameSpace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginInfo_descriptor_, &LoginInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManipulateNS_descriptor_, &ManipulateNS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryDocument_descriptor_, &QueryDocument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameValueSet_descriptor_, &NameValueSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Document_descriptor_, &Document::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Payload_descriptor_, &Payload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayloadReply_descriptor_, &PayloadReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Heartbeat_descriptor_, &Heartbeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Network_descriptor_, &Network::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Management_descriptor_, &Management::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_comm_2eproto() {
  delete Finger::default_instance_;
  delete Finger_reflection_;
  delete NameSpace::default_instance_;
  delete NameSpace_reflection_;
  delete LoginInfo::default_instance_;
  delete LoginInfo_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
  delete ManipulateNS::default_instance_;
  delete ManipulateNS_reflection_;
  delete QueryDocument::default_instance_;
  delete QueryDocument_reflection_;
  delete NameValueSet::default_instance_;
  delete NameValueSet_reflection_;
  delete Document::default_instance_;
  delete Document_reflection_;
  delete Header::default_instance_;
  delete Header_reflection_;
  delete Payload::default_instance_;
  delete Payload_reflection_;
  delete PayloadReply::default_instance_;
  delete PayloadReply_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete Heartbeat::default_instance_;
  delete Heartbeat_reflection_;
  delete Network::default_instance_;
  delete Network_reflection_;
  delete Management::default_instance_;
  delete Management_reflection_;
}

void protobuf_AddDesc_comm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ncomm.proto\"%\n\006Finger\022\016\n\006number\030\001 \002(\005\022\013"
    "\n\003tag\030\002 \002(\t\"\\\n\tNameSpace\022\017\n\007user_id\030\001 \002("
    "\t\022\014\n\004name\030\002 \002(\t\022\014\n\004city\030\003 \002(\t\022\020\n\010zip_cod"
    "e\030\004 \002(\t\022\020\n\010password\030\005 \002(\t\".\n\tLoginInfo\022\017"
    "\n\007user_id\030\001 \002(\t\022\020\n\010password\030\002 \002(\t\"\035\n\005Poi"
    "nt\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\"M\n\014ManipulateNS"
    "\022\017\n\007user_id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\014\n\004city\030"
    "\003 \001(\t\022\020\n\010zip_code\030\004 \001(\t\"V\n\rQueryDocument"
    "\022\017\n\007user_id\030\001 \001(\t\022\030\n\010location\030\002 \001(\0132\006.Po"
    "int\022\014\n\004name\030\003 \001(\t\022\014\n\004time\030\004 \001(\003\"\224\001\n\014Name"
    "ValueSet\022)\n\tnode_type\030\001 \002(\0162\026.NameValueS"
    "et.NodeType\022\014\n\004name\030\002 \001(\t\022\r\n\005value\030\003 \001(\t"
    "\022\033\n\004node\030\004 \003(\0132\r.NameValueSet\"\037\n\010NodeTyp"
    "e\022\010\n\004NODE\020\001\022\t\n\005VALUE\020\002\"\212\001\n\010Document\022\022\n\nn"
    "ame_space\030\001 \002(\t\022\n\n\002id\030\002 \001(\003\022\020\n\010img_byte\030"
    "\003 \002(\014\022\030\n\010location\030\004 \002(\0132\006.Point\022\021\n\tfile_"
    "name\030\005 \001(\t\022\021\n\tfile_type\030\006 \001(\t\022\014\n\004time\030\007 "
    "\001(\003\"\321\003\n\006Header\022#\n\nrouting_id\030\002 \002(\0162\017.Hea"
    "der.Routing\022\022\n\noriginator\030\003 \002(\t\022\013\n\003tag\030\004"
    " \002(\t\022\'\n\nreply_code\030\005 \001(\0162\023.Header.ReplyS"
    "tatus\022\021\n\treply_msg\030\006 \001(\t\"\355\001\n\007Routing\022\n\n\006"
    "FINGER\020\002\022\t\n\005STATS\020\003\022\t\n\005LOGIN\020\n\022\020\n\014NAMESP"
    "ACEADD\020\013\022\021\n\rNAMESPACEFIND\020\014\022\023\n\017NAMESPACE"
    "REMOVE\020\r\022\014\n\010LOGINJPA\020\017\022\023\n\017NAMESPACEADDJP"
    "A\020\020\022\024\n\020NAMESPACEFINDJPA\020\021\022\026\n\022NAMESPACERE"
    "MOVEJPA\020\022\022\n\n\006DOCADD\020\024\022\013\n\007DOCFIND\020\025\022\r\n\tDO"
    "CUPDATE\020\026\022\r\n\tDOCREMOVE\020\027\"U\n\013ReplyStatus\022"
    "\013\n\007SUCCESS\020\001\022\013\n\007FAILURE\020\002\022\n\n\006NOAUTH\020\003\022\016\n"
    "\nMISSINGARG\020\004\022\020\n\014NOCONNECTION\020\005\"\261\001\n\007Payl"
    "oad\022\027\n\006finger\030\001 \001(\0132\007.Finger\022\026\n\003doc\030\002 \001("
    "\0132\t.Document\022\031\n\005space\030\003 \001(\0132\n.NameSpace\022"
    "\035\n\005query\030\004 \001(\0132\016.QueryDocument\022 \n\tqueryU"
    "ser\030\005 \001(\0132\r.ManipulateNS\022\031\n\005login\030\006 \001(\0132"
    "\n.LoginInfo\"\206\001\n\014PayloadReply\022\027\n\004docs\030\001 \003"
    "(\0132\t.Document\022\032\n\006spaces\030\002 \003(\0132\n.NameSpac"
    "e\022\030\n\005stats\030\003 \001(\0132\t.Document\022\031\n\006finger\030\004 "
    "\001(\0132\t.Document\022\014\n\004uuid\030\005 \001(\t\":\n\007Request\022"
    "\027\n\006header\030\001 \002(\0132\007.Header\022\026\n\004body\030\002 \002(\0132\010"
    ".Payload\"@\n\010Response\022\027\n\006header\030\001 \002(\0132\007.H"
    "eader\022\033\n\004body\030\002 \001(\0132\r.PayloadReply\",\n\tHe"
    "artbeat\022\016\n\006nodeId\030\001 \002(\t\022\017\n\007timeRef\030\002 \002(\003"
    "\"\225\001\n\007Network\022\016\n\006nodeId\030\001 \002(\t\022\037\n\006action\030\002"
    " \002(\0162\017.Network.Action\"Y\n\006Action\022\014\n\010NODEJ"
    "OIN\020\001\022\r\n\tNODELEAVE\020\002\022\014\n\010NODEDEAD\020\003\022\007\n\003MA"
    "P\0207\022\014\n\010ANNOUNCE\0208\022\r\n\010SHUTDOWN\020\347\007\"\?\n\nMana"
    "gement\022\027\n\005graph\030\001 \001(\0132\010.Network\022\030\n\004beat\030"
    "\002 \001(\0132\n.HeartbeatB\007\n\003eyeH\001", 1866);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "comm.proto", &protobuf_RegisterTypes);
  Finger::default_instance_ = new Finger();
  NameSpace::default_instance_ = new NameSpace();
  LoginInfo::default_instance_ = new LoginInfo();
  Point::default_instance_ = new Point();
  ManipulateNS::default_instance_ = new ManipulateNS();
  QueryDocument::default_instance_ = new QueryDocument();
  NameValueSet::default_instance_ = new NameValueSet();
  Document::default_instance_ = new Document();
  Header::default_instance_ = new Header();
  Payload::default_instance_ = new Payload();
  PayloadReply::default_instance_ = new PayloadReply();
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  Heartbeat::default_instance_ = new Heartbeat();
  Network::default_instance_ = new Network();
  Management::default_instance_ = new Management();
  Finger::default_instance_->InitAsDefaultInstance();
  NameSpace::default_instance_->InitAsDefaultInstance();
  LoginInfo::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  ManipulateNS::default_instance_->InitAsDefaultInstance();
  QueryDocument::default_instance_->InitAsDefaultInstance();
  NameValueSet::default_instance_->InitAsDefaultInstance();
  Document::default_instance_->InitAsDefaultInstance();
  Header::default_instance_->InitAsDefaultInstance();
  Payload::default_instance_->InitAsDefaultInstance();
  PayloadReply::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Heartbeat::default_instance_->InitAsDefaultInstance();
  Network::default_instance_->InitAsDefaultInstance();
  Management::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_comm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_comm_2eproto {
  StaticDescriptorInitializer_comm_2eproto() {
    protobuf_AddDesc_comm_2eproto();
  }
} static_descriptor_initializer_comm_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Finger::kNumberFieldNumber;
const int Finger::kTagFieldNumber;
#endif  // !_MSC_VER

Finger::Finger()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Finger::InitAsDefaultInstance() {
}

Finger::Finger(const Finger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Finger::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Finger::~Finger() {
  SharedDtor();
}

void Finger::SharedDtor() {
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_;
  }
  if (this != default_instance_) {
  }
}

void Finger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Finger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Finger_descriptor_;
}

const Finger& Finger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

Finger* Finger::default_instance_ = NULL;

Finger* Finger::New() const {
  return new Finger;
}

void Finger::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::kEmptyString) {
        tag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Finger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tag;
        break;
      }
      
      // required string tag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Finger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }
  
  // required string tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Finger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }
  
  // required string tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Finger::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }
    
    // required string tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Finger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Finger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Finger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Finger::MergeFrom(const Finger& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Finger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Finger::CopyFrom(const Finger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Finger::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Finger::Swap(Finger* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Finger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Finger_descriptor_;
  metadata.reflection = Finger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NameSpace::kUserIdFieldNumber;
const int NameSpace::kNameFieldNumber;
const int NameSpace::kCityFieldNumber;
const int NameSpace::kZipCodeFieldNumber;
const int NameSpace::kPasswordFieldNumber;
#endif  // !_MSC_VER

NameSpace::NameSpace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameSpace::InitAsDefaultInstance() {
}

NameSpace::NameSpace(const NameSpace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameSpace::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zip_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameSpace::~NameSpace() {
  SharedDtor();
}

void NameSpace::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (zip_code_ != &::google::protobuf::internal::kEmptyString) {
    delete zip_code_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void NameSpace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameSpace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameSpace_descriptor_;
}

const NameSpace& NameSpace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

NameSpace* NameSpace::default_instance_ = NULL;

NameSpace* NameSpace::New() const {
  return new NameSpace;
}

void NameSpace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    if (has_zip_code()) {
      if (zip_code_ != &::google::protobuf::internal::kEmptyString) {
        zip_code_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_city;
        break;
      }
      
      // required string city = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_zip_code;
        break;
      }
      
      // required string zip_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zip_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zip_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zip_code().data(), this->zip_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_password;
        break;
      }
      
      // required string password = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required string city = 3;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->city(), output);
  }
  
  // required string zip_code = 4;
  if (has_zip_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zip_code().data(), this->zip_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->zip_code(), output);
  }
  
  // required string password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameSpace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required string city = 3;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->city(), target);
  }
  
  // required string zip_code = 4;
  if (has_zip_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zip_code().data(), this->zip_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->zip_code(), target);
  }
  
  // required string password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameSpace::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string city = 3;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }
    
    // required string zip_code = 4;
    if (has_zip_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zip_code());
    }
    
    // required string password = 5;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameSpace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameSpace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameSpace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameSpace::MergeFrom(const NameSpace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_zip_code()) {
      set_zip_code(from.zip_code());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameSpace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameSpace::CopyFrom(const NameSpace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameSpace::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void NameSpace::Swap(NameSpace* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(name_, other->name_);
    std::swap(city_, other->city_);
    std::swap(zip_code_, other->zip_code_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameSpace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameSpace_descriptor_;
  metadata.reflection = NameSpace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginInfo::kUserIdFieldNumber;
const int LoginInfo::kPasswordFieldNumber;
#endif  // !_MSC_VER

LoginInfo::LoginInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginInfo::InitAsDefaultInstance() {
}

LoginInfo::LoginInfo(const LoginInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginInfo::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginInfo::~LoginInfo() {
  SharedDtor();
}

void LoginInfo::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void LoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginInfo_descriptor_;
}

const LoginInfo& LoginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

LoginInfo* LoginInfo::default_instance_ = NULL;

LoginInfo* LoginInfo::New() const {
  return new LoginInfo;
}

void LoginInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_id(), output);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }
    
    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginInfo::MergeFrom(const LoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginInfo::CopyFrom(const LoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LoginInfo::Swap(LoginInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginInfo_descriptor_;
  metadata.reflection = LoginInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }
      
      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }
  
  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }
  
  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ManipulateNS::kUserIdFieldNumber;
const int ManipulateNS::kNameFieldNumber;
const int ManipulateNS::kCityFieldNumber;
const int ManipulateNS::kZipCodeFieldNumber;
#endif  // !_MSC_VER

ManipulateNS::ManipulateNS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ManipulateNS::InitAsDefaultInstance() {
}

ManipulateNS::ManipulateNS(const ManipulateNS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ManipulateNS::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zip_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManipulateNS::~ManipulateNS() {
  SharedDtor();
}

void ManipulateNS::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (zip_code_ != &::google::protobuf::internal::kEmptyString) {
    delete zip_code_;
  }
  if (this != default_instance_) {
  }
}

void ManipulateNS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManipulateNS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManipulateNS_descriptor_;
}

const ManipulateNS& ManipulateNS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

ManipulateNS* ManipulateNS::default_instance_ = NULL;

ManipulateNS* ManipulateNS::New() const {
  return new ManipulateNS;
}

void ManipulateNS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    if (has_zip_code()) {
      if (zip_code_ != &::google::protobuf::internal::kEmptyString) {
        zip_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManipulateNS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_city;
        break;
      }
      
      // optional string city = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_zip_code;
        break;
      }
      
      // optional string zip_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zip_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zip_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zip_code().data(), this->zip_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ManipulateNS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string city = 3;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->city(), output);
  }
  
  // optional string zip_code = 4;
  if (has_zip_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zip_code().data(), this->zip_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->zip_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ManipulateNS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string city = 3;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->city(), target);
  }
  
  // optional string zip_code = 4;
  if (has_zip_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zip_code().data(), this->zip_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->zip_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ManipulateNS::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string city = 3;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }
    
    // optional string zip_code = 4;
    if (has_zip_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zip_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManipulateNS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManipulateNS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManipulateNS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManipulateNS::MergeFrom(const ManipulateNS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_zip_code()) {
      set_zip_code(from.zip_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManipulateNS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManipulateNS::CopyFrom(const ManipulateNS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManipulateNS::IsInitialized() const {
  
  return true;
}

void ManipulateNS::Swap(ManipulateNS* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(name_, other->name_);
    std::swap(city_, other->city_);
    std::swap(zip_code_, other->zip_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManipulateNS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManipulateNS_descriptor_;
  metadata.reflection = ManipulateNS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryDocument::kUserIdFieldNumber;
const int QueryDocument::kLocationFieldNumber;
const int QueryDocument::kNameFieldNumber;
const int QueryDocument::kTimeFieldNumber;
#endif  // !_MSC_VER

QueryDocument::QueryDocument()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryDocument::InitAsDefaultInstance() {
  location_ = const_cast< ::Point*>(&::Point::default_instance());
}

QueryDocument::QueryDocument(const QueryDocument& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryDocument::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryDocument::~QueryDocument() {
  SharedDtor();
}

void QueryDocument::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete location_;
  }
}

void QueryDocument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryDocument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryDocument_descriptor_;
}

const QueryDocument& QueryDocument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

QueryDocument* QueryDocument::default_instance_ = NULL;

QueryDocument* QueryDocument::New() const {
  return new QueryDocument;
}

void QueryDocument::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_location()) {
      if (location_ != NULL) location_->::Point::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryDocument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_location;
        break;
      }
      
      // optional .Point location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // optional int64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryDocument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_id(), output);
  }
  
  // optional .Point location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->location(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional int64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryDocument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }
  
  // optional .Point location = 2;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->location(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional int64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryDocument::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }
    
    // optional .Point location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryDocument::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryDocument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryDocument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryDocument::MergeFrom(const QueryDocument& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_location()) {
      mutable_location()->::Point::MergeFrom(from.location());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryDocument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryDocument::CopyFrom(const QueryDocument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDocument::IsInitialized() const {
  
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  return true;
}

void QueryDocument::Swap(QueryDocument* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(location_, other->location_);
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryDocument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryDocument_descriptor_;
  metadata.reflection = QueryDocument_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NameValueSet_NodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameValueSet_NodeType_descriptor_;
}
bool NameValueSet_NodeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NameValueSet_NodeType NameValueSet::NODE;
const NameValueSet_NodeType NameValueSet::VALUE;
const NameValueSet_NodeType NameValueSet::NodeType_MIN;
const NameValueSet_NodeType NameValueSet::NodeType_MAX;
const int NameValueSet::NodeType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NameValueSet::kNodeTypeFieldNumber;
const int NameValueSet::kNameFieldNumber;
const int NameValueSet::kValueFieldNumber;
const int NameValueSet::kNodeFieldNumber;
#endif  // !_MSC_VER

NameValueSet::NameValueSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameValueSet::InitAsDefaultInstance() {
}

NameValueSet::NameValueSet(const NameValueSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameValueSet::SharedCtor() {
  _cached_size_ = 0;
  node_type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameValueSet::~NameValueSet() {
  SharedDtor();
}

void NameValueSet::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void NameValueSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameValueSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameValueSet_descriptor_;
}

const NameValueSet& NameValueSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

NameValueSet* NameValueSet::default_instance_ = NULL;

NameValueSet* NameValueSet::New() const {
  return new NameValueSet;
}

void NameValueSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    node_type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameValueSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NameValueSet.NodeType node_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NameValueSet_NodeType_IsValid(value)) {
            set_node_type(static_cast< ::NameValueSet_NodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }
      
      // optional string value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_node;
        break;
      }
      
      // repeated .NameValueSet node = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_node;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameValueSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NameValueSet.NodeType node_type = 1;
  if (has_node_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->node_type(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->value(), output);
  }
  
  // repeated .NameValueSet node = 4;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->node(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameValueSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NameValueSet.NodeType node_type = 1;
  if (has_node_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->node_type(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }
  
  // repeated .NameValueSet node = 4;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->node(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameValueSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NameValueSet.NodeType node_type = 1;
    if (has_node_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->node_type());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  // repeated .NameValueSet node = 4;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameValueSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameValueSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameValueSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameValueSet::MergeFrom(const NameValueSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_type()) {
      set_node_type(from.node_type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameValueSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameValueSet::CopyFrom(const NameValueSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameValueSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < node_size(); i++) {
    if (!this->node(i).IsInitialized()) return false;
  }
  return true;
}

void NameValueSet::Swap(NameValueSet* other) {
  if (other != this) {
    std::swap(node_type_, other->node_type_);
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    node_.Swap(&other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameValueSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameValueSet_descriptor_;
  metadata.reflection = NameValueSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Document::kNameSpaceFieldNumber;
const int Document::kIdFieldNumber;
const int Document::kImgByteFieldNumber;
const int Document::kLocationFieldNumber;
const int Document::kFileNameFieldNumber;
const int Document::kFileTypeFieldNumber;
const int Document::kTimeFieldNumber;
#endif  // !_MSC_VER

Document::Document()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Document::InitAsDefaultInstance() {
  location_ = const_cast< ::Point*>(&::Point::default_instance());
}

Document::Document(const Document& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Document::SharedCtor() {
  _cached_size_ = 0;
  name_space_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = GOOGLE_LONGLONG(0);
  img_byte_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_ = NULL;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Document::~Document() {
  SharedDtor();
}

void Document::SharedDtor() {
  if (name_space_ != &::google::protobuf::internal::kEmptyString) {
    delete name_space_;
  }
  if (img_byte_ != &::google::protobuf::internal::kEmptyString) {
    delete img_byte_;
  }
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (file_type_ != &::google::protobuf::internal::kEmptyString) {
    delete file_type_;
  }
  if (this != default_instance_) {
    delete location_;
  }
}

void Document::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Document_descriptor_;
}

const Document& Document::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

Document* Document::default_instance_ = NULL;

Document* Document::New() const {
  return new Document;
}

void Document::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name_space()) {
      if (name_space_ != &::google::protobuf::internal::kEmptyString) {
        name_space_->clear();
      }
    }
    id_ = GOOGLE_LONGLONG(0);
    if (has_img_byte()) {
      if (img_byte_ != &::google::protobuf::internal::kEmptyString) {
        img_byte_->clear();
      }
    }
    if (has_location()) {
      if (location_ != NULL) location_->::Point::Clear();
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    if (has_file_type()) {
      if (file_type_ != &::google::protobuf::internal::kEmptyString) {
        file_type_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Document::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name_space = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_space()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name_space().data(), this->name_space().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_img_byte;
        break;
      }
      
      // required bytes img_byte = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_img_byte:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_img_byte()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_location;
        break;
      }
      
      // required .Point location = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_file_name;
        break;
      }
      
      // optional string file_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_file_type;
        break;
      }
      
      // optional string file_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_type().data(), this->file_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }
      
      // optional int64 time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Document::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name_space = 1;
  if (has_name_space()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_space().data(), this->name_space().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name_space(), output);
  }
  
  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }
  
  // required bytes img_byte = 3;
  if (has_img_byte()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->img_byte(), output);
  }
  
  // required .Point location = 4;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->location(), output);
  }
  
  // optional string file_name = 5;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->file_name(), output);
  }
  
  // optional string file_type = 6;
  if (has_file_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_type().data(), this->file_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->file_type(), output);
  }
  
  // optional int64 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Document::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name_space = 1;
  if (has_name_space()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_space().data(), this->name_space().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name_space(), target);
  }
  
  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }
  
  // required bytes img_byte = 3;
  if (has_img_byte()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->img_byte(), target);
  }
  
  // required .Point location = 4;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->location(), target);
  }
  
  // optional string file_name = 5;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->file_name(), target);
  }
  
  // optional string file_type = 6;
  if (has_file_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_type().data(), this->file_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->file_type(), target);
  }
  
  // optional int64 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Document::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name_space = 1;
    if (has_name_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_space());
    }
    
    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // required bytes img_byte = 3;
    if (has_img_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->img_byte());
    }
    
    // required .Point location = 4;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }
    
    // optional string file_name = 5;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }
    
    // optional string file_type = 6;
    if (has_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_type());
    }
    
    // optional int64 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Document* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Document*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Document::MergeFrom(const Document& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name_space()) {
      set_name_space(from.name_space());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_img_byte()) {
      set_img_byte(from.img_byte());
    }
    if (from.has_location()) {
      mutable_location()->::Point::MergeFrom(from.location());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_type()) {
      set_file_type(from.file_type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Document::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document::CopyFrom(const Document& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  return true;
}

void Document::Swap(Document* other) {
  if (other != this) {
    std::swap(name_space_, other->name_space_);
    std::swap(id_, other->id_);
    std::swap(img_byte_, other->img_byte_);
    std::swap(location_, other->location_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_type_, other->file_type_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Document::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Document_descriptor_;
  metadata.reflection = Document_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Header_Routing_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_Routing_descriptor_;
}
bool Header_Routing_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
    case 13:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Header_Routing Header::FINGER;
const Header_Routing Header::STATS;
const Header_Routing Header::LOGIN;
const Header_Routing Header::NAMESPACEADD;
const Header_Routing Header::NAMESPACEFIND;
const Header_Routing Header::NAMESPACEREMOVE;
const Header_Routing Header::LOGINJPA;
const Header_Routing Header::NAMESPACEADDJPA;
const Header_Routing Header::NAMESPACEFINDJPA;
const Header_Routing Header::NAMESPACEREMOVEJPA;
const Header_Routing Header::DOCADD;
const Header_Routing Header::DOCFIND;
const Header_Routing Header::DOCUPDATE;
const Header_Routing Header::DOCREMOVE;
const Header_Routing Header::Routing_MIN;
const Header_Routing Header::Routing_MAX;
const int Header::Routing_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Header_ReplyStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_ReplyStatus_descriptor_;
}
bool Header_ReplyStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Header_ReplyStatus Header::SUCCESS;
const Header_ReplyStatus Header::FAILURE;
const Header_ReplyStatus Header::NOAUTH;
const Header_ReplyStatus Header::MISSINGARG;
const Header_ReplyStatus Header::NOCONNECTION;
const Header_ReplyStatus Header::ReplyStatus_MIN;
const Header_ReplyStatus Header::ReplyStatus_MAX;
const int Header::ReplyStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Header::kRoutingIdFieldNumber;
const int Header::kOriginatorFieldNumber;
const int Header::kTagFieldNumber;
const int Header::kReplyCodeFieldNumber;
const int Header::kReplyMsgFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header::InitAsDefaultInstance() {
}

Header::Header(const Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  routing_id_ = 2;
  originator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reply_code_ = 1;
  reply_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  SharedDtor();
}

void Header::SharedDtor() {
  if (originator_ != &::google::protobuf::internal::kEmptyString) {
    delete originator_;
  }
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_;
  }
  if (reply_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete reply_msg_;
  }
  if (this != default_instance_) {
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New() const {
  return new Header;
}

void Header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    routing_id_ = 2;
    if (has_originator()) {
      if (originator_ != &::google::protobuf::internal::kEmptyString) {
        originator_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::kEmptyString) {
        tag_->clear();
      }
    }
    reply_code_ = 1;
    if (has_reply_msg()) {
      if (reply_msg_ != &::google::protobuf::internal::kEmptyString) {
        reply_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Header.Routing routing_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Header_Routing_IsValid(value)) {
            set_routing_id(static_cast< ::Header_Routing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_originator;
        break;
      }
      
      // required string originator = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_originator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->originator().data(), this->originator().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tag;
        break;
      }
      
      // required string tag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reply_code;
        break;
      }
      
      // optional .Header.ReplyStatus reply_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reply_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Header_ReplyStatus_IsValid(value)) {
            set_reply_code(static_cast< ::Header_ReplyStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_reply_msg;
        break;
      }
      
      // optional string reply_msg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reply_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reply_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reply_msg().data(), this->reply_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Header.Routing routing_id = 2;
  if (has_routing_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->routing_id(), output);
  }
  
  // required string originator = 3;
  if (has_originator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originator().data(), this->originator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->originator(), output);
  }
  
  // required string tag = 4;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tag(), output);
  }
  
  // optional .Header.ReplyStatus reply_code = 5;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->reply_code(), output);
  }
  
  // optional string reply_msg = 6;
  if (has_reply_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reply_msg().data(), this->reply_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->reply_msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Header.Routing routing_id = 2;
  if (has_routing_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->routing_id(), target);
  }
  
  // required string originator = 3;
  if (has_originator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originator().data(), this->originator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->originator(), target);
  }
  
  // required string tag = 4;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tag(), target);
  }
  
  // optional .Header.ReplyStatus reply_code = 5;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->reply_code(), target);
  }
  
  // optional string reply_msg = 6;
  if (has_reply_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reply_msg().data(), this->reply_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->reply_msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Header.Routing routing_id = 2;
    if (has_routing_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->routing_id());
    }
    
    // required string originator = 3;
    if (has_originator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->originator());
    }
    
    // required string tag = 4;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }
    
    // optional .Header.ReplyStatus reply_code = 5;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reply_code());
    }
    
    // optional string reply_msg = 6;
    if (has_reply_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reply_msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_routing_id()) {
      set_routing_id(from.routing_id());
    }
    if (from.has_originator()) {
      set_originator(from.originator());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_reply_msg()) {
      set_reply_msg(from.reply_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Header::Swap(Header* other) {
  if (other != this) {
    std::swap(routing_id_, other->routing_id_);
    std::swap(originator_, other->originator_);
    std::swap(tag_, other->tag_);
    std::swap(reply_code_, other->reply_code_);
    std::swap(reply_msg_, other->reply_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Payload::kFingerFieldNumber;
const int Payload::kDocFieldNumber;
const int Payload::kSpaceFieldNumber;
const int Payload::kQueryFieldNumber;
const int Payload::kQueryUserFieldNumber;
const int Payload::kLoginFieldNumber;
#endif  // !_MSC_VER

Payload::Payload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Payload::InitAsDefaultInstance() {
  finger_ = const_cast< ::Finger*>(&::Finger::default_instance());
  doc_ = const_cast< ::Document*>(&::Document::default_instance());
  space_ = const_cast< ::NameSpace*>(&::NameSpace::default_instance());
  query_ = const_cast< ::QueryDocument*>(&::QueryDocument::default_instance());
  queryuser_ = const_cast< ::ManipulateNS*>(&::ManipulateNS::default_instance());
  login_ = const_cast< ::LoginInfo*>(&::LoginInfo::default_instance());
}

Payload::Payload(const Payload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Payload::SharedCtor() {
  _cached_size_ = 0;
  finger_ = NULL;
  doc_ = NULL;
  space_ = NULL;
  query_ = NULL;
  queryuser_ = NULL;
  login_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Payload::~Payload() {
  SharedDtor();
}

void Payload::SharedDtor() {
  if (this != default_instance_) {
    delete finger_;
    delete doc_;
    delete space_;
    delete query_;
    delete queryuser_;
    delete login_;
  }
}

void Payload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Payload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Payload_descriptor_;
}

const Payload& Payload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

Payload* Payload::default_instance_ = NULL;

Payload* Payload::New() const {
  return new Payload;
}

void Payload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_finger()) {
      if (finger_ != NULL) finger_->::Finger::Clear();
    }
    if (has_doc()) {
      if (doc_ != NULL) doc_->::Document::Clear();
    }
    if (has_space()) {
      if (space_ != NULL) space_->::NameSpace::Clear();
    }
    if (has_query()) {
      if (query_ != NULL) query_->::QueryDocument::Clear();
    }
    if (has_queryuser()) {
      if (queryuser_ != NULL) queryuser_->::ManipulateNS::Clear();
    }
    if (has_login()) {
      if (login_ != NULL) login_->::LoginInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Payload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Finger finger = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finger()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_doc;
        break;
      }
      
      // optional .Document doc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_space;
        break;
      }
      
      // optional .NameSpace space = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_space:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_space()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_query;
        break;
      }
      
      // optional .QueryDocument query = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_queryUser;
        break;
      }
      
      // optional .ManipulateNS queryUser = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queryUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryuser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_login;
        break;
      }
      
      // optional .LoginInfo login = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Payload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Finger finger = 1;
  if (has_finger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->finger(), output);
  }
  
  // optional .Document doc = 2;
  if (has_doc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->doc(), output);
  }
  
  // optional .NameSpace space = 3;
  if (has_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->space(), output);
  }
  
  // optional .QueryDocument query = 4;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->query(), output);
  }
  
  // optional .ManipulateNS queryUser = 5;
  if (has_queryuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->queryuser(), output);
  }
  
  // optional .LoginInfo login = 6;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->login(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Payload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Finger finger = 1;
  if (has_finger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->finger(), target);
  }
  
  // optional .Document doc = 2;
  if (has_doc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->doc(), target);
  }
  
  // optional .NameSpace space = 3;
  if (has_space()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->space(), target);
  }
  
  // optional .QueryDocument query = 4;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->query(), target);
  }
  
  // optional .ManipulateNS queryUser = 5;
  if (has_queryuser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->queryuser(), target);
  }
  
  // optional .LoginInfo login = 6;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->login(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Payload::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Finger finger = 1;
    if (has_finger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->finger());
    }
    
    // optional .Document doc = 2;
    if (has_doc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doc());
    }
    
    // optional .NameSpace space = 3;
    if (has_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->space());
    }
    
    // optional .QueryDocument query = 4;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query());
    }
    
    // optional .ManipulateNS queryUser = 5;
    if (has_queryuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryuser());
    }
    
    // optional .LoginInfo login = 6;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Payload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Payload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Payload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Payload::MergeFrom(const Payload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_finger()) {
      mutable_finger()->::Finger::MergeFrom(from.finger());
    }
    if (from.has_doc()) {
      mutable_doc()->::Document::MergeFrom(from.doc());
    }
    if (from.has_space()) {
      mutable_space()->::NameSpace::MergeFrom(from.space());
    }
    if (from.has_query()) {
      mutable_query()->::QueryDocument::MergeFrom(from.query());
    }
    if (from.has_queryuser()) {
      mutable_queryuser()->::ManipulateNS::MergeFrom(from.queryuser());
    }
    if (from.has_login()) {
      mutable_login()->::LoginInfo::MergeFrom(from.login());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Payload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Payload::CopyFrom(const Payload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload::IsInitialized() const {
  
  if (has_finger()) {
    if (!this->finger().IsInitialized()) return false;
  }
  if (has_doc()) {
    if (!this->doc().IsInitialized()) return false;
  }
  if (has_space()) {
    if (!this->space().IsInitialized()) return false;
  }
  if (has_query()) {
    if (!this->query().IsInitialized()) return false;
  }
  if (has_login()) {
    if (!this->login().IsInitialized()) return false;
  }
  return true;
}

void Payload::Swap(Payload* other) {
  if (other != this) {
    std::swap(finger_, other->finger_);
    std::swap(doc_, other->doc_);
    std::swap(space_, other->space_);
    std::swap(query_, other->query_);
    std::swap(queryuser_, other->queryuser_);
    std::swap(login_, other->login_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Payload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Payload_descriptor_;
  metadata.reflection = Payload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayloadReply::kDocsFieldNumber;
const int PayloadReply::kSpacesFieldNumber;
const int PayloadReply::kStatsFieldNumber;
const int PayloadReply::kFingerFieldNumber;
const int PayloadReply::kUuidFieldNumber;
#endif  // !_MSC_VER

PayloadReply::PayloadReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayloadReply::InitAsDefaultInstance() {
  stats_ = const_cast< ::Document*>(&::Document::default_instance());
  finger_ = const_cast< ::Document*>(&::Document::default_instance());
}

PayloadReply::PayloadReply(const PayloadReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayloadReply::SharedCtor() {
  _cached_size_ = 0;
  stats_ = NULL;
  finger_ = NULL;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayloadReply::~PayloadReply() {
  SharedDtor();
}

void PayloadReply::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
    delete stats_;
    delete finger_;
  }
}

void PayloadReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayloadReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayloadReply_descriptor_;
}

const PayloadReply& PayloadReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

PayloadReply* PayloadReply::default_instance_ = NULL;

PayloadReply* PayloadReply::New() const {
  return new PayloadReply;
}

void PayloadReply::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_stats()) {
      if (stats_ != NULL) stats_->::Document::Clear();
    }
    if (has_finger()) {
      if (finger_ != NULL) finger_->::Document::Clear();
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  docs_.Clear();
  spaces_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayloadReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Document docs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_docs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_docs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_docs;
        if (input->ExpectTag(18)) goto parse_spaces;
        break;
      }
      
      // repeated .NameSpace spaces = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spaces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spaces()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_spaces;
        if (input->ExpectTag(26)) goto parse_stats;
        break;
      }
      
      // optional .Document stats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_finger;
        break;
      }
      
      // optional .Document finger = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_finger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finger()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_uuid;
        break;
      }
      
      // optional string uuid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayloadReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Document docs = 1;
  for (int i = 0; i < this->docs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->docs(i), output);
  }
  
  // repeated .NameSpace spaces = 2;
  for (int i = 0; i < this->spaces_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->spaces(i), output);
  }
  
  // optional .Document stats = 3;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stats(), output);
  }
  
  // optional .Document finger = 4;
  if (has_finger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->finger(), output);
  }
  
  // optional string uuid = 5;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->uuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayloadReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Document docs = 1;
  for (int i = 0; i < this->docs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->docs(i), target);
  }
  
  // repeated .NameSpace spaces = 2;
  for (int i = 0; i < this->spaces_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->spaces(i), target);
  }
  
  // optional .Document stats = 3;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stats(), target);
  }
  
  // optional .Document finger = 4;
  if (has_finger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->finger(), target);
  }
  
  // optional string uuid = 5;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->uuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayloadReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .Document stats = 3;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats());
    }
    
    // optional .Document finger = 4;
    if (has_finger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->finger());
    }
    
    // optional string uuid = 5;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }
    
  }
  // repeated .Document docs = 1;
  total_size += 1 * this->docs_size();
  for (int i = 0; i < this->docs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->docs(i));
  }
  
  // repeated .NameSpace spaces = 2;
  total_size += 1 * this->spaces_size();
  for (int i = 0; i < this->spaces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spaces(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayloadReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayloadReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayloadReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayloadReply::MergeFrom(const PayloadReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  docs_.MergeFrom(from.docs_);
  spaces_.MergeFrom(from.spaces_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_stats()) {
      mutable_stats()->::Document::MergeFrom(from.stats());
    }
    if (from.has_finger()) {
      mutable_finger()->::Document::MergeFrom(from.finger());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayloadReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayloadReply::CopyFrom(const PayloadReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayloadReply::IsInitialized() const {
  
  for (int i = 0; i < docs_size(); i++) {
    if (!this->docs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < spaces_size(); i++) {
    if (!this->spaces(i).IsInitialized()) return false;
  }
  if (has_stats()) {
    if (!this->stats().IsInitialized()) return false;
  }
  if (has_finger()) {
    if (!this->finger().IsInitialized()) return false;
  }
  return true;
}

void PayloadReply::Swap(PayloadReply* other) {
  if (other != this) {
    docs_.Swap(&other->docs_);
    spaces_.Swap(&other->spaces_);
    std::swap(stats_, other->stats_);
    std::swap(finger_, other->finger_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayloadReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayloadReply_descriptor_;
  metadata.reflection = PayloadReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Request::kHeaderFieldNumber;
const int Request::kBodyFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request::InitAsDefaultInstance() {
  header_ = const_cast< ::Header*>(&::Header::default_instance());
  body_ = const_cast< ::Payload*>(&::Payload::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete body_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::Header::Clear();
    }
    if (has_body()) {
      if (body_ != NULL) body_->::Payload::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }
      
      // required .Payload body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // required .Payload body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // required .Payload body = 2;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->body(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // required .Payload body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::Header::MergeFrom(from.header());
    }
    if (from.has_body()) {
      mutable_body()->::Payload::MergeFrom(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  if (has_body()) {
    if (!this->body().IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kHeaderFieldNumber;
const int Response::kBodyFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Response::InitAsDefaultInstance() {
  header_ = const_cast< ::Header*>(&::Header::default_instance());
  body_ = const_cast< ::PayloadReply*>(&::PayloadReply::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete body_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::Header::Clear();
    }
    if (has_body()) {
      if (body_ != NULL) body_->::PayloadReply::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }
      
      // optional .PayloadReply body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // optional .PayloadReply body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // optional .PayloadReply body = 2;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->body(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // optional .PayloadReply body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::Header::MergeFrom(from.header());
    }
    if (from.has_body()) {
      mutable_body()->::PayloadReply::MergeFrom(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  if (has_body()) {
    if (!this->body().IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Heartbeat::kNodeIdFieldNumber;
const int Heartbeat::kTimeRefFieldNumber;
#endif  // !_MSC_VER

Heartbeat::Heartbeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Heartbeat::InitAsDefaultInstance() {
}

Heartbeat::Heartbeat(const Heartbeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Heartbeat::SharedCtor() {
  _cached_size_ = 0;
  nodeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timeref_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Heartbeat::~Heartbeat() {
  SharedDtor();
}

void Heartbeat::SharedDtor() {
  if (nodeid_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeid_;
  }
  if (this != default_instance_) {
  }
}

void Heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Heartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Heartbeat_descriptor_;
}

const Heartbeat& Heartbeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

Heartbeat* Heartbeat::default_instance_ = NULL;

Heartbeat* Heartbeat::New() const {
  return new Heartbeat;
}

void Heartbeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nodeid()) {
      if (nodeid_ != &::google::protobuf::internal::kEmptyString) {
        nodeid_->clear();
      }
    }
    timeref_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nodeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodeid().data(), this->nodeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timeRef;
        break;
      }
      
      // required int64 timeRef = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeRef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timeref_)));
          set_has_timeref();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string nodeId = 1;
  if (has_nodeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid().data(), this->nodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nodeid(), output);
  }
  
  // required int64 timeRef = 2;
  if (has_timeref()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timeref(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Heartbeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string nodeId = 1;
  if (has_nodeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid().data(), this->nodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nodeid(), target);
  }
  
  // required int64 timeRef = 2;
  if (has_timeref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timeref(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Heartbeat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nodeId = 1;
    if (has_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodeid());
    }
    
    // required int64 timeRef = 2;
    if (has_timeref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timeref());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Heartbeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Heartbeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nodeid()) {
      set_nodeid(from.nodeid());
    }
    if (from.has_timeref()) {
      set_timeref(from.timeref());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Heartbeat::Swap(Heartbeat* other) {
  if (other != this) {
    std::swap(nodeid_, other->nodeid_);
    std::swap(timeref_, other->timeref_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Heartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Heartbeat_descriptor_;
  metadata.reflection = Heartbeat_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Network_Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Network_Action_descriptor_;
}
bool Network_Action_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 55:
    case 56:
    case 999:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Network_Action Network::NODEJOIN;
const Network_Action Network::NODELEAVE;
const Network_Action Network::NODEDEAD;
const Network_Action Network::MAP;
const Network_Action Network::ANNOUNCE;
const Network_Action Network::SHUTDOWN;
const Network_Action Network::Action_MIN;
const Network_Action Network::Action_MAX;
const int Network::Action_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Network::kNodeIdFieldNumber;
const int Network::kActionFieldNumber;
#endif  // !_MSC_VER

Network::Network()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Network::InitAsDefaultInstance() {
}

Network::Network(const Network& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Network::SharedCtor() {
  _cached_size_ = 0;
  nodeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  action_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Network::~Network() {
  SharedDtor();
}

void Network::SharedDtor() {
  if (nodeid_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeid_;
  }
  if (this != default_instance_) {
  }
}

void Network::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Network::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Network_descriptor_;
}

const Network& Network::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

Network* Network::default_instance_ = NULL;

Network* Network::New() const {
  return new Network;
}

void Network::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nodeid()) {
      if (nodeid_ != &::google::protobuf::internal::kEmptyString) {
        nodeid_->clear();
      }
    }
    action_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Network::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nodeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodeid().data(), this->nodeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }
      
      // required .Network.Action action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Network_Action_IsValid(value)) {
            set_action(static_cast< ::Network_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Network::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string nodeId = 1;
  if (has_nodeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid().data(), this->nodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nodeid(), output);
  }
  
  // required .Network.Action action = 2;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Network::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string nodeId = 1;
  if (has_nodeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid().data(), this->nodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nodeid(), target);
  }
  
  // required .Network.Action action = 2;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Network::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nodeId = 1;
    if (has_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodeid());
    }
    
    // required .Network.Action action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Network::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Network* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Network*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Network::MergeFrom(const Network& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nodeid()) {
      set_nodeid(from.nodeid());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Network::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Network::CopyFrom(const Network& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Network::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Network::Swap(Network* other) {
  if (other != this) {
    std::swap(nodeid_, other->nodeid_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Network::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Network_descriptor_;
  metadata.reflection = Network_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Management::kGraphFieldNumber;
const int Management::kBeatFieldNumber;
#endif  // !_MSC_VER

Management::Management()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Management::InitAsDefaultInstance() {
  graph_ = const_cast< ::Network*>(&::Network::default_instance());
  beat_ = const_cast< ::Heartbeat*>(&::Heartbeat::default_instance());
}

Management::Management(const Management& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Management::SharedCtor() {
  _cached_size_ = 0;
  graph_ = NULL;
  beat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Management::~Management() {
  SharedDtor();
}

void Management::SharedDtor() {
  if (this != default_instance_) {
    delete graph_;
    delete beat_;
  }
}

void Management::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Management::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Management_descriptor_;
}

const Management& Management::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

Management* Management::default_instance_ = NULL;

Management* Management::New() const {
  return new Management;
}

void Management::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_graph()) {
      if (graph_ != NULL) graph_->::Network::Clear();
    }
    if (has_beat()) {
      if (beat_ != NULL) beat_->::Heartbeat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Management::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Network graph = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_beat;
        break;
      }
      
      // optional .Heartbeat beat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_beat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Management::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Network graph = 1;
  if (has_graph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->graph(), output);
  }
  
  // optional .Heartbeat beat = 2;
  if (has_beat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->beat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Management::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Network graph = 1;
  if (has_graph()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->graph(), target);
  }
  
  // optional .Heartbeat beat = 2;
  if (has_beat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->beat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Management::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Network graph = 1;
    if (has_graph()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->graph());
    }
    
    // optional .Heartbeat beat = 2;
    if (has_beat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Management::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Management* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Management*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Management::MergeFrom(const Management& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_graph()) {
      mutable_graph()->::Network::MergeFrom(from.graph());
    }
    if (from.has_beat()) {
      mutable_beat()->::Heartbeat::MergeFrom(from.beat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Management::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Management::CopyFrom(const Management& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Management::IsInitialized() const {
  
  if (has_graph()) {
    if (!this->graph().IsInitialized()) return false;
  }
  if (has_beat()) {
    if (!this->beat().IsInitialized()) return false;
  }
  return true;
}

void Management::Swap(Management* other) {
  if (other != this) {
    std::swap(graph_, other->graph_);
    std::swap(beat_, other->beat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Management::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Management_descriptor_;
  metadata.reflection = Management_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
